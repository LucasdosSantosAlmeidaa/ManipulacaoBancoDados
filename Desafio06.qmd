---
title: "Desafio06"
author: "Lucas dos Santos Almeida"
format: pdf
editor: visual
---

```{r}
library(RSQLite)
```

1.  Baixe o arquivo `disco.db` e armazene na variável `path` o caminho completo (pasta) na qual o arquivo foi gravado. Utilize o comando `file.path()` para combinar a variável `path` com o nome do arquivo (`disco.db`) e obter o nome do arquivo com seu respectivo caminho. Armazene este resultado na variável `fname`.

```{r}
db = dbConnect(SQLite(),'./disco.db')

path = "\\\\smb/ra252789/Documentos/ME315"
fname = file.path(path, "disco.db")
```

2.  Utilizando o pacote `RSQLite`, conecte-se ao arquivo de banco de dados. Armazene a conexão na variável `conn`.

```{r}
conn = dbConnect(SQLite(), "disco.db")
```

3.  Liste as tabelas existentes no banco de dados.

```{r}
tabelas <- dbListTables(conn)

tabelas

```

4.  Identifique os nomes de todas as colunas existentes na tabela `customers`.

    ```{r}
    colunas_customers <- dbListFields(conn, "customers")

    colunas_customers
    ```

5.  Utilizando **apenas** `SQLite`, com o apoio do comando `dbGetQuery`, identifique quantos clientes estão atualmente cadastrados neste banco de dados

    ```{r}
    total_clientes <- dbGetQuery(conn, "SELECT COUNT(*) as total FROM customers")

    total_clientes$total
    ```

<!-- -->

6.  Utilizando **apenas** `SQLite`, identifique o número de países diferentes em que moram os clientes encontrados acima.

    ```{r}
    paises_diferentes <- dbGetQuery(conn, "SELECT COUNT(DISTINCT Country) as num_paises FROM customers")

    paises_diferentes$num_paises
    ```

7.  Utilizando **apenas** `SQLite`, quantos clientes existem por país? A tabela resultante deve conter o nome do país e a respectiva contagem, além de ser ordenada de maneira decrescente pela referida contagem.

    ```{r}
    qntd_clientes_pais = dbGetQuery(conn, "SELECT Country, COUNT(*) as quantidade FROM customers GROUP BY Country ORDER BY quantidade DESC")

    qntd_clientes_pais
    ```

8.  Quais são os 5 países com mais clientes registrados? Use apenas `SQLite`.

    ```{r}
    top5_paises <- dbGetQuery(conn, "SELECT Country, COUNT(*) as quantidade FROM customers GROUP BY Country ORDER BY quantidade DESC LIMIT 5")
    ```

<!-- -->

9.  Quais são os países registrados que possuem apenas 6 letras no nome?

    ```{r}
    paises_6_letras <- dbGetQuery(conn, "SELECT DISTINCT Country FROM customers WHERE LENGTH(Country) = 6 ORDER BY Country")

    paises_6_letras
    ```

<!-- -->

10. Quais foram as músicas compradas por clientes brasileiros?

    ```{r}
    musicas_brasileiros <- dbGetQuery(conn, "
        SELECT DISTINCT t.Name as Musica
        FROM invoices i
        JOIN customers c ON i.CustomerId = c.CustomerId
        JOIN invoice_items ii ON i.InvoiceId = ii.InvoiceId
        JOIN tracks t ON ii.TrackId = t.TrackId
        WHERE c.Country = 'Brazil'
        ORDER BY t.Name")
    ```

    -   Qual o álbum mais tocado por pais?

```{r}


album_top1 <- dbGetQuery(conn, "
    WITH ContagemAlbums AS (
        SELECT 
            c.Country as Pais,
            al.Title as Album,
            ar.Name as Artista,
            COUNT(*) as VezesTocado
        FROM invoices i
        JOIN customers c ON i.CustomerId = c.CustomerId
        JOIN invoice_items ii ON i.InvoiceId = ii.InvoiceId
        JOIN tracks t ON ii.TrackId = t.TrackId
        JOIN albums al ON t.AlbumId = al.AlbumId
        JOIN artists ar ON al.ArtistId = ar.ArtistId
        GROUP BY c.Country, al.AlbumId
    ),
    RankedAlbums AS (
        SELECT 
            Pais,
            Album,
            Artista,
            VezesTocado,
            ROW_NUMBER() OVER (PARTITION BY Pais ORDER BY VezesTocado DESC) as Ranking
        FROM ContagemAlbums
    )
    SELECT Pais, Album, Artista, VezesTocado
    FROM RankedAlbums
    WHERE Ranking = 1
    ORDER BY VezesTocado DESC
")

album_top1

```

-   Qual o artista mais tocado por pais?

```{r}
artista_por_pais <- dbGetQuery(conn, "
WITH ArtistaPorPais AS (
        SELECT 
            c.Country as Pais,
            ar.Name as Artista,
            COUNT(*) as VezesTocado,
            ROW_NUMBER() OVER (PARTITION BY c.Country ORDER BY COUNT(*) DESC) as Ranking
        FROM invoices i
        JOIN customers c ON i.CustomerId = c.CustomerId
        JOIN invoice_items ii ON i.InvoiceId = ii.InvoiceId
        JOIN tracks t ON ii.TrackId = t.TrackId
        JOIN albums al ON t.AlbumId = al.AlbumId
        JOIN artists ar ON al.ArtistId = ar.ArtistId
        GROUP BY c.Country, ar.ArtistId
    )
    SELECT Pais, Artista, VezesTocado
    FROM ArtistaPorPais
    WHERE Ranking = 1
    ORDER BY VezesTocado DESC
")


artista_por_pais
```

11.Desconecte do banco de dados

```{r}
dbDisconnect(conn)
```
